{"plain_text": "CSE 5337/7337\n Spring 201\n8  Example of Algorithm 1.7\n \u0152 to illustrate the size of temporary memory structure needed to build an \nintersected posting list.\n T1 = {1, 2, 4, 11, 31, \n54, 173, 174}\n T2 = {2, 31, 54, 101}\n T3 = {2, 31}\n  Algorithm 1.7 intersects a set\n of lists, and invokes algorithm 1.6 to intersect two lists.\n  INTERSECT ( {T\n1, T\n2, T\n3} )\n terms\n \n1, T\n2, T\n3}  // \nsortedby increasingfrequency\n result\n \n terms\n \n2, T\n3} While terms <> nil\n result\n = intersect (result, postings(first(terms))) = intersect ({2, 31}, {2, 31, 54, 101})\n //apply algorithm 1.6 to intersect two postings lists\n result\n \n terms\n \n3} End while\n While terms <> nil\n result\n = intersect (result, postings(fir\nst(terms))) = intersect ({2, 31}, {1, 2, 4, 11, 31, 54, 173, 174})\n //apply algorithm 1.6 to intersect two postings lists\n result\n \n terms\n \n End while\n Return result = { 2, 31 }\n // done\n  // Use a different order for merging, note \nthe size temporary structures that would be needed\n  INTERSECT ( {T\n1, T\n2, T\n3} )\n terms\n \n3, T\n2, T\n1}  // \nsortedby decreasingfrequency\n result\n \n terms\n \n2, T\n1} While terms <> nil\n result\n = intersect (result, postings(first(terms))) = intersect ({1, 2, 4, 11, 31, 54, 173, 174}, {2, 31, \n54, 101})\n //apply algorithm 1.6 to intersect two postings lists\n result\n \n terms\n \n1} End while\n While terms <> nil\n result\n = intersect (result, postings(first(terms))) = intersect ({2, 31, 54}, {2, 31})\n //apply algorithm 1.6 to intersect two postings lists\n result\n \n terms\n \n End while\n Return result = { 2, 31 }\n // done\n    ", "document_id": 8, "content_hash": "6ed9e0bad01a1a288abc24304d664303"}